import numpy as np
from scipy.optimize import minimize
import json

# Define the given measurements for tb, M, and tb_true. tb_detection is not required actually.
tb_detection = [
    np.array([
            [
                0.8104560637869208,
                0.585799426997851,
                0.0,
                -0.15642845773749975
            ],
            [
                -0.585799426997851,
                0.8104560637869208,
                -0.0,
                -0.56018633060769
            ],
            [
                -0.0,
                0.0,
                1.0,
                0.094
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ]),
    np.array([
            [
                -0.4258872728791505,
                0.9047762324462103,
                0.0,
                -0.024254420394608726
            ],
            [
                -0.9047762324462103,
                -0.4258872728791505,
                -0.0,
                -0.4092597717976997
            ],
            [
                -0.0,
                0.0,
                1.0,
                0.094
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ]),
    np.array([
            [
                -0.9912542022621715,
                -0.13196630819109242,
                0.0,
                0.14069999643400863
            ],
            [
                0.13196630819109242,
                -0.9912542022621715,
                0.0,
                -0.5036541570700559
            ],
            [
                0.0,
                0.0,
                1.0,
                0.094
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ])
]

tb_true = [
    np.array([
    [
        0.817839839,
        0.575466,
        0.0,
        -0.153708
    ],
    [
        -0.575466,
        0.817839839,
        0.0,
        -0.563748
    ],
    [
        0.0,
        0.0,
        1.0,
        0.095671
    ],
    [
        0.0,
        0.0,
        0.0,
        1.0
    ]
]),
    np.array([
            [
                -0.42241159079617696,
                0.9064041275027578,
                7.487995577809923e-05,
                -0.024009595184362353
            ],
            [
                -0.9064041279189695,
                -0.42241159445627274,
                4.1956666588375226e-05,
                -0.4127217769050371
            ],
            [
                6.965985728500243e-05,
                -5.0148518737558654e-05,
                0.9999999963163152,
                0.09654968067043798
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ]),
    np.array([
            [
                -0.9923660292537417,
                -0.1233274599123915,
                4.0183569762423004e-05,
                0.1394271721707062
            ],
            [
                0.1233274608992024,
                -0.9923660296764514,
                2.307276138760982e-05,
                -0.5040401063814058
            ],
            [
                3.70313045282638e-05,
                2.7852362230807005e-05,
                0.9999999989264642,
                0.09648063100905724
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ])
]

M = [
    np.array([
        [-0.81666681, -0.57687867,  0.01631947,  0.12477303],
        [-0.5770338,   0.81669108, -0.00690527,  0.01996796],
        [-0.00934447, -0.01505619, -0.99984298,  0.84436018],
        [ 0.0,         0.0,         0.0,         1.0       ]
    ]),
    np.array([
        [ 0.41599398, -0.90935774, -0.00418383, -0.00575121],
        [-0.9092173,  -0.41600451,  0.01625258,  0.1723515 ],
        [-0.0165199,  -0.00295696, -0.99985916,  0.84431547],
        [ 0.0,         0.0,         0.0,         1.0       ]
    ]),
    np.array([
        [ 9.92342099e-01,  1.21142436e-01, -2.41178319e-02, -1.71721480e-01],
        [ 1.21091329e-01, -9.92634937e-01, -3.57372612e-03,  7.97518948e-02],
        [-2.43731325e-02,  6.25898562e-04, -9.99702735e-01,  8.45308686e-01],
        [ 0.0,             0.0,             0.0,             1.0           ]
    ])
]


# Initial guess for the camera matrix (identity matrix)
cam_initial = np.array([
            [
                -0.9999396286754503,
                0.010878774824618161,
                0.001546370821914486,
                -0.03318588046032547
            ],
            [
                0.010843939749134257,
                0.9997209360214042,
                -0.020987116314648016,
                -0.5637810669042437
            ],
            [
                -0.001774253398125664,
                -0.020969080542614954,
                -0.9997785503230592,
                0.9385462731939085
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ])

# Define the error function
def error_squared(cam_flat):
    cam = cam_flat.reshape(4, 4)
    error = 0
    for tb_dect, M_, tb_t in zip(tb_detection, M, tb_true):
        tb = np.dot(cam, M_)
        error += np.sum((tb - tb_t) ** 2)
        print("Error:", error)
    return error

def error_abs(cam_flat):
    cam = cam_flat.reshape(4, 4)
    error = 0
    for tb_dect, M_, tb_t in zip(tb_detection, M, tb_true):
        tb = np.dot(cam, M_)
        error += np.linalg.norm(tb - tb_t)
        print("Error:", error)
    return error

# Run the optimization
result = minimize(error_abs, cam_initial.flatten(), method='BFGS')

# Get the optimized camera matrix
cam_optimized = result.x.reshape(4, 4)

np.set_printoptions(precision=7, suppress=True)
print("Optimized Camera Matrix:")
print(cam_optimized)

cam_optimized_json = json.dumps(cam_optimized.tolist(), indent=4)
print("Optimized Camera Matrix in JSON format:")
print(cam_optimized_json)